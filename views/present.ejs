<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/style/katex.min.css">
    <link rel="stylesheet" href="/style/code.css">
    <title>Present</title>

    <script src="/socket.io/socket.io.js"></script>
    <style>
        body,
        html {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        #container {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            height: 100vh;
        }

        #container>div {
            flex: 1;
            display: flex;
            flex-direction: column;
        }


        #presentationContainer {
            display: flex;
            flex-grow: 1;
            flex-direction: column;
        }

        #presentationContainer .slide {
            display: flex;
            flex-direction: column;
            justify-content: center;
            padding-left: 16px;
            height: 100%;
            width: 100%;
            position: absolute;
            padding: 16px;
            box-sizing: border-box;
        }

        #presentationContainer blockquote {
            background-color: lightgray;
            border-left: orange 5px solid;
            padding-left: 8px;
        }

        #currentSlide,
        #nextSlide {
            position: relative;
            flex: 1;
            flex-direction: column;
            justify-content: center;
        }

        #currentSlide {
            border: 1px solid darkgreen;
        }

        #nextSlide {
            border: 1px solid darkorange;
        }

        #controlPanel {
            display: flex;
            flex-direction: column;
            padding: 8px;
        }

        #notes {
            flex: 4;
        }

        #controls {
            flex: 1;
        }

        #controls>div {
            display: flex;
            flex-wrap: wrap;
        }

        #controls button {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 8px;
            cursor: pointer;
            flex-basis: calc(50% - 16px);
        }

        #controls button:hover {
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.24);
        }

        #presentation {
            display: none;
        }

        @media (max-width:600px) {
            #presentationPreview {
                display: none !important;
            }
        }
    </style>

</head>

<body>
    <div id="container">
        <div id="controlPanel">
            <div id="notes">
                <h2>Notes</h2>
                <h4>Slide <span id="slide">0</span>/<span id="maxSlide">0</span></h4>
                <div></div>
            </div>
            <div id="controls">
                <h2>Controls</h2>
                <div>
                    <button onclick="presenter.updateSlide('first')">First</button>
                    <button onclick="presenter.updateSlide('prev')">Prev</button>
                    <button onclick="presenter.updateSlide('next')">Next</button>
                    <button onclick="presenter.updateSlide('last')">Last</button>
                </div>
            </div>
        </div>
        <div id="presentationPreview">
            <h2>Presentation (Watchers: <span id="watcherCount">0</span>)</h2>
            <div id="presentationContainer">
                <style title="presentationStyle"></style>
                <div id="presentation"></div>
                <div id="currentSlide"></div>
                <div id="nextSlide"></div>
            </div>
        </div>
    </div>

    <script>
        class Presenter {
            presentation = `<%= presentation.replaceAll("`", '\\`') %>`;
            $presentation = document.getElementById('presentation');
            $currentSlide = document.getElementById('currentSlide');
            $nextSlide = document.getElementById('nextSlide');
            $watcherCount = document.getElementById('watcherCount');
            $notes = document.querySelector('#notes div');
            $maxSlide = document.getElementById('maxSlide');
            $slide = document.getElementById('slide');

            currentSlide;
            slides;
            socket;

            constructor() {
                this.socket = io();

                this.socket.on('error', (errorMessage) => {
                    console.error(errorMessage);
                });

                this.socket.on('get configuration', (peerId) => {
                    console.log('get configuration', peerId);
                    this.socket.emit('initialize presentation', this.presentation, peerId, {
                        currentSlide: this.currentSlide
                    });
                });

                this.socket.on('update watchers', (count) => {
                    console.log('update watchers', count);
                    this.$watcherCount.textContent = count;
                })

                document.onkeydown = (ev) => {
                    this.updateSlide(ev.key);
                    console.log(ev.key);
                }

                let startPoint = undefined;
                document.ontouchstart = (ev) => {
                    startPoint = {
                        x: ev.changedTouches[0].screenX,
                        y: ev.changedTouches[0].screenY,
                    }
                }

                document.ontouchcancel = () => {
                    startPoint = undefined;
                }

                document.ontouchend = (ev) => {
                    if (!startPoint) {
                        return;
                    }

                    const endPoint = {
                        x: ev.changedTouches[0].screenX,
                        y: ev.changedTouches[0].screenY,
                    }

                    if (Math.abs(startPoint.x - endPoint.x) > 50) {
                        // We swiped at least 50px

                        if (startPoint.x - endPoint.x < 0) {
                            // We swiped right
                            this.updateSlide('SwipeRight');
                        } else {
                            // We swiped left
                            this.updateSlide('SwipeLeft');
                        }
                    }

                    startPoint = undefined;
                }
            }

            updateSlide(what) {
                console.log("update slide", what);
                switch (what) {
                    case 'first':
                        this.currentSlide = 1; break;
                    case 'prev':
                    case 'ArrowLeft':
                    case 'SwipeRight':
                        this.currentSlide--; this.currentSlide = Math.max(1, this.currentSlide); break;
                    case 'next':
                    case 'ArrowRight':
                    case 'SwipeLeft':
                        this.currentSlide++; this.currentSlide = Math.min(this.slides?.length ?? 1, this.currentSlide); break;
                    case 'last':
                        this.currentSlide = this.slides?.length ?? 1; break;
                    default: return;
                }

                this.setSlide();
            }

            setSlide() {
                if (!this.slides) {
                    return;
                }

                this.socket.emit('set slide', this.presentation, this.currentSlide);

                const currentSlide = [...this.slides.values()].find(element => element.dataset.slideNo == this.currentSlide);
                const nextSlide = [...this.slides.values()].find(element => element.dataset.slideNo == this.currentSlide + 1);

                this.$currentSlide.innerHTML = currentSlide?.outerHTML ?? "";
                this.$nextSlide.innerHTML = nextSlide?.outerHTML ?? "";

                this.$notes.innerHTML = '';
                const comments = [...presenter.$currentSlide.querySelectorAll('.comment')];
                comments.forEach(comment => comment.setAttribute('style', ''));
                this.$notes.append(...comments);

                this.$maxSlide.textContent = this.slides.length;
                this.$slide.textContent = this.currentSlide;
            }

            async initialize() {
                this.currentSlide = 1;
                const response = await fetch('/present/' + this.presentation + '/html');
                if (response.redirected) {
                    location.href = response.url;
                    return;
                }
                if (!response.ok) {
                    return;
                }

                const parsedPresentation = await response.json();
                this.$presentation.innerHTML = parsedPresentation.presentation.html;
                this.applyStyle(parsedPresentation.style);
                // get all slides
                this.slides = document.querySelectorAll('#presentation .slide');

                this.socket.emit('present', this.presentation);
                this.setSlide();
            }

            applyStyle(style) {
                for (let i = 0; i < document.styleSheets.length; i++) {
                    const css = document.styleSheets.item(i);
                    if (css.title === 'presentationStyle') {
                        const newStyle = document.createElement('style');
                        newStyle.id = css.title;
                        newStyle.title = css.title;
                        newStyle.textContent = style;
                        css.ownerNode.replaceWith(newStyle)

                        const newCss = document.styleSheets.item(i);
                        [...newCss.rules].forEach(rule => {
                            if (rule.type === rule.STYLE_RULE) {
                                rule.selectorText = rule.selectorText.split(',').map(selector => '#presentationContainer ' + selector).join(', ');
                            }
                        });

                        break;
                    }
                }
            }
        }

        const presenter = new Presenter();
        presenter.initialize();

    </script>
</body>

</html>