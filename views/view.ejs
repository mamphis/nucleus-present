<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/style/katex.min.css">
    <link rel="stylesheet" href="/style/code.css">
    <title>Present</title>

    <script src="/socket.io/socket.io.js"></script>
    <style>
        pre.hljs {
            padding: 8px;
        }

        body,
        html {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        #container {
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        #presentation {
            flex-grow: 1;
            position: relative;
        }

        #presentation .slide {
            /* display: none; */
            display: flex;
            position: absolute;
            height: 100%;
            width: 100%;
            flex-direction: column;
            justify-content: center;
            transform: translateX(-100vw);
            transition: transform 0.3s linear;
            overflow: hidden;
            padding: 16px;
            box-sizing: border-box;
        }

        #presentation .slide.active {
            transform: translateX(0);
            opacity: 1;

        }

        #presentation blockquote {
            background-color: lightgray;
            border-left: orange 5px solid;
            padding-left: 8px;
        }

        #presentation-info {
            max-height: fit-content;
            background-color: #ccc;
            display: flex;
            flex-direction: row !important;
            justify-content: space-between;
            align-items: center;
            padding: 8px 32px;
        }

        #presentation-info>span {
            flex: 1;
        }

        .text-left {
            text-align: left;
        }

        .text-center {
            text-align: center;
        }

        .text-right {
            text-align: right;
        }
    </style>

</head>

<body>
    <style title="presentationStyle"></style>
    <div id="container">
        <div id="presentation"></div>
        <div id="presentation-info">
            <span class="text-left" id="prop-author"></span>
            <span class="text-center" id="prop-title"></span>
            <span class="text-right">Slide <span id="slide">0</span>/<span id="maxSlide">0</span>
                <span id="prop-date"></span>
            </span>
        </div>
    </div>

    <script>
        class Viewer {
            presentation = `<%= presentation.replaceAll("`", '\\`') %>`;
            $presentation = document.getElementById('presentation');
            $maxSlide = document.getElementById('maxSlide');
            $slide = document.getElementById('slide');

            currentSlide;
            slides;
            socket;

            constructor() {
                this.socket = io();

                this.socket.on('error', (errorMessage) => {
                    console.error(errorMessage);
                });

                this.socket.on('initialize presentation', (configuration) => {
                    console.log('initialize presentation', configuration);
                    this.initialize();
                    this.currentSlide = configuration.currentSlide;
                });

                this.socket.on('set slide', (slide) => {
                    console.log('set slide', slide);
                    this.currentSlide = slide;

                    this.setSlide();
                });

                this.socket.on('presentation started', () => {
                    console.log('presentation started');
                    this.initialize();
                    this.currentSlide = 1;
                })

                this.socket.emit('watch presentation', this.presentation);
            }

            setSlide() {
                if (!this.slides) {
                    return;
                }

                this.$presentation.classList.remove('active')

                const visibleSlide = this.slides.find(slide => slide.dataset.slideNo == this.currentSlide);
                this.slides.forEach(slide => {
                    if (slide !== visibleSlide) {
                        slide.classList.remove('active');
                    }
                });

                visibleSlide?.classList.add('active');

                this.$maxSlide.innerText = this.slides.length;
                this.$slide.innerText = this.currentSlide;
            }

            async initialize() {
                if (this.currentSlide) {
                    // already initialized
                    return;
                }

                const response = await fetch('/present/' + this.presentation + '/html');
                if (response.redirected) {
                    location.href = response.url;
                    return;
                }
                if (!response.ok) {
                    return;
                }

                const parsedPresentation = await response.json();
                this.$presentation.innerHTML = parsedPresentation.presentation.html;

                this.applyHeaders(parsedPresentation.presentation.headers)
                this.applyStyle(parsedPresentation.style);
                // get all slides
                this.slides = [...document.querySelectorAll('#presentation .slide')];
                this.setSlide();
            }

            applyStyle(style) {
                for (let i = 0; i < document.styleSheets.length; i++) {
                    const css = document.styleSheets.item(i);
                    if (css.title === 'presentationStyle') {
                        const newStyle = document.createElement('style');
                        newStyle.id = css.title;
                        newStyle.title = css.title;
                        newStyle.textContent = style;
                        css.ownerNode.replaceWith(newStyle)

                        const newCss = document.styleSheets.item(i);
                        [...newCss.rules].forEach(rule => {
                            if (rule.type === rule.STYLE_RULE) {
                                rule.selectorText = rule.selectorText.split(',').map(selector => '#presentation ' + selector).join(', ');
                            }
                        });

                        break;
                    }
                }
            }

            applyHeaders(headers) {
                for (const key in headers) {
                    if (Object.hasOwnProperty.call(headers, key)) {
                        const value = headers[key];
                        const prop = document.getElementById('prop-' + key)
                        if (prop) {
                            prop.innerText = value;
                        }
                    }
                }
            }
        }



        const viewer = new Viewer();

    </script>
</body>

</html>