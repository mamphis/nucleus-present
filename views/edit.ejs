<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/style/katex.min.css">
    <style>
        #preview>.slide {
            margin: 4px;
            border: 1px solid darkblue;
            min-height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            padding-left: 16px;
        }

        #preview>.slide:not(:first-child) {
            margin-top: 8px;
        }

        #preview>.slide.bg-dark {
            background-color: rgb(66, 66, 66);
            color: aliceblue;
        }

        #preview eq {
            display: flex;
            justify-content: center;
        }

        #preview>:not(.slide) {
            background-color: red;
        }
    </style>
    <style>
        body,
        html {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        #container {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            height: 100vh;
        }

        #container>div {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        #editors>div {
            flex-grow: 1;
            display: flex;
            width: 100%;
            flex-direction: column;
        }

        #markdownEditor,
        #styleEditor {
            flex-grow: 1;
            border: 1px solid grey
        }

        #preview {
            flex: 1;
            border: 1px solid grey;
            overflow-y: auto;
        }
    </style>
</head>

<body>
    <div id="container">
        <div id="editors">
            <div>
                <h2>Edit your slides</h2>
                <div id="markdownEditor"></div>
            </div>
            <div>
                <h2>Edit your style</h2>
                <div id="styleEditor"></div>
            </div>
        </div>
        <div id="previewContainer">
            <h2>Preview</h2>
            <style id="previewStyle" title="previewStyle">
            </style>
            <div id="preview"></div>
        </div>
    </div>

    <script>
        class MarkdownHandler {
            $previewContainer = document.getElementById('preview');
            $previewStyle = document.getElementById('previewStyle');
            $markdownEditor = document.getElementById('markdownEditor');
            $styleEditor = document.getElementById('styleEditor');
            lastEdit = undefined;

            constructor() {
                document.addEventListener("keydown", async e => {
                    if ((window.navigator.platform.match("Mac") ? e.metaKey : e.ctrlKey) && e.keyCode == 83) {
                        e.preventDefault();
                        await this.save();
                    }
                }, false);
            }

            async save() {
                const response = await fetch(window.location.href, {
                    body: JSON.stringify({ data: this.markdownEditor.getValue(), style: this.styleEditor.getValue() }),
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });

                if (response.ok) {
                    console.log("Done");
                } else {
                    alert("Cannot save slide");
                }
            }

            loadPreview() {
                if (this.lastEdit) {
                    return;
                }

                this.lastEdit = setTimeout(async () => {
                    const response = await fetch('/edit/parse', {
                        body: JSON.stringify({ data: this.markdownEditor.getValue(), style: this.styleEditor.getValue() }),
                        method: 'post',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    });

                    const data = await response.json();
                    for (let i = 0; i < document.styleSheets.length; i++) {
                        const css = document.styleSheets.item(i);
                        if (css.title === this.$previewStyle.id) {
                            const newStyle = document.createElement('style');
                            newStyle.id = css.title;
                            newStyle.title = css.title;
                            newStyle.textContent = this.styleEditor.getValue();
                            css.ownerNode.replaceWith(newStyle)
                            break;
                        }
                    }

                    this.$previewContainer.innerHTML = data.html;
                    this.lastEdit = undefined;
                }, 1000);
            }

            async loadEditor() {
                const response = await fetch(location.href + '/data');
                const data = await response.json();

                if (typeof monaco === "undefined") {
                    // debugger;
                    await new Promise(res => setTimeout(res, 1000));
                }

                this.markdownEditor = monaco.editor.create(this.$markdownEditor, {
                    value: data.md,
                    theme: 'vs-dark',
                    language: 'markdown',
                    automaticLayout: true,
                });

                this.styleEditor = monaco.editor.create(this.$styleEditor, {
                    value: data.style,
                    language: 'css',
                    automaticLayout: true,
                });

                this.markdownEditor.onDidChangeModelContent(this.loadPreview.bind(this));
                this.styleEditor.onDidChangeModelContent(this.loadPreview.bind(this));

                this.markdownEditor.focus();
                this.loadPreview();
            }

            async setTheme(theme) {

                const response = await fetch('/theme/' + theme);
                if (response.ok) {
                    monaco.editor.defineTheme(theme, await response.json());
                    monaco.editor.setTheme(theme);
                }
            }
        }

        mdHandler = new MarkdownHandler();
    </script>
    <script>
        var require = { paths: { vs: '../node_modules/monaco-editor/min/vs' } };
    </script>
    <script src="../node_modules/monaco-editor/min/vs/loader.js"></script>
    <script src="../node_modules/monaco-editor/min/vs/editor/editor.main.nls.js"></script>
    <script src="../node_modules/monaco-editor/min/vs/editor/editor.main.js" onload="mdHandler.loadEditor()"></script>

</body>

</html>